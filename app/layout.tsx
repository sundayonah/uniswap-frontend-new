// 'use client'
// import './globals.css'
// import '@rainbow-me/rainbowkit/styles.css';
// import {
//   getDefaultConfig,
//   RainbowKitProvider,
// } from '@rainbow-me/rainbowkit';
// import { WagmiProvider } from 'wagmi';
// import {
//   mainnet,
//   polygon,
//   optimism,
//   arbitrum,
//   base,
//   zora,
// } from 'wagmi/chains';
// import {
//   QueryClientProvider,
//   QueryClient,
// } from "@tanstack/react-query";

// const config = getDefaultConfig({
//   appName: 'My RainbowKit App',
//   projectId: '60fa83860edbb9d7d2e1df131caa2675',
//   chains: [mainnet, polygon, optimism, arbitrum, base, zora],
//   ssr: true, // If your dApp uses server side rendering (SSR)
// });


// export const metadata = {
//   title: 'Uniswap',
//   description: 'Generated by create next app',
// }

// const queryClient = new QueryClient();

// export default function RootLayout({
//   children,
// }: {
//   children: React.ReactNode
// }) {
//   return (
//     <html lang="en">
//       <body >
//         {/* <Providers>
//         </Providers> */}
//             <WagmiProvider config={config}>
//       <QueryClientProvider client={queryClient}>
//         <RainbowKitProvider>
//         {children}
//         </RainbowKitProvider>
//       </QueryClientProvider>
//     </WagmiProvider>
//       </body>
//     </html>
//   )
// }
"use client"

import './globals.css';
import '@rainbow-me/rainbowkit/styles.css';
import { useState, useEffect } from 'react';
import { RainbowKitProvider, getDefaultConfig } from '@rainbow-me/rainbowkit';
import { Config, WagmiProvider } from 'wagmi';
import {
  mainnet,
  polygon,
  optimism,
  arbitrum,
  base,
  zora,
} from 'wagmi/chains';
import {
  QueryClientProvider,
  QueryClient,
} from "@tanstack/react-query";

const metadata = {
  title: 'Uniswap',
  description: 'Generated by create next app',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  const [config, setConfig] = useState<Config | null>(null); // Initialize config state with Config type

  useEffect(() => {
    // Fetch config data from the server or perform any server-side logic here
    const fetchedConfig = getDefaultConfig({
      appName: 'My RainbowKit App',
      projectId: '60fa83860edbb9d7d2e1df131caa2675',
      chains: [mainnet, polygon, optimism, arbitrum, base, zora],
      ssr: true,
    });
    setConfig(fetchedConfig);
  }, []);

  const queryClient = new QueryClient();

  return (
    <html lang="en">
      <body>
        {config && (
          <WagmiProvider config={config}>
            <QueryClientProvider client={queryClient}>
              <RainbowKitProvider>
                {children}
              </RainbowKitProvider>
            </QueryClientProvider>
          </WagmiProvider>
        )}
      </body>
    </html>
  );
}
